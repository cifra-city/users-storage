/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the TeamDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamDataRelationships{}

// TeamDataRelationships struct for TeamDataRelationships
type TeamDataRelationships struct {
	Members *TeamDataRelationshipsMembers `json:"members,omitempty"`
}

// NewTeamDataRelationships instantiates a new TeamDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamDataRelationships() *TeamDataRelationships {
	this := TeamDataRelationships{}
	return &this
}

// NewTeamDataRelationshipsWithDefaults instantiates a new TeamDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamDataRelationshipsWithDefaults() *TeamDataRelationships {
	this := TeamDataRelationships{}
	return &this
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *TeamDataRelationships) GetMembers() TeamDataRelationshipsMembers {
	if o == nil || IsNil(o.Members) {
		var ret TeamDataRelationshipsMembers
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamDataRelationships) GetMembersOk() (*TeamDataRelationshipsMembers, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *TeamDataRelationships) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given TeamDataRelationshipsMembers and assigns it to the Members field.
func (o *TeamDataRelationships) SetMembers(v TeamDataRelationshipsMembers) {
	o.Members = &v
}

func (o TeamDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableTeamDataRelationships struct {
	value *TeamDataRelationships
	isSet bool
}

func (v NullableTeamDataRelationships) Get() *TeamDataRelationships {
	return v.value
}

func (v *NullableTeamDataRelationships) Set(val *TeamDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamDataRelationships(val *TeamDataRelationships) *NullableTeamDataRelationships {
	return &NullableTeamDataRelationships{value: val, isSet: true}
}

func (v NullableTeamDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


