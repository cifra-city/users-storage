/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MemberUpdateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberUpdateData{}

// MemberUpdateData struct for MemberUpdateData
type MemberUpdateData struct {
	Type string `json:"type"`
	Attributes MemberUpdateDataAttributes `json:"attributes"`
}

type _MemberUpdateData MemberUpdateData

// NewMemberUpdateData instantiates a new MemberUpdateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberUpdateData(type_ string, attributes MemberUpdateDataAttributes) *MemberUpdateData {
	this := MemberUpdateData{}
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewMemberUpdateDataWithDefaults instantiates a new MemberUpdateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberUpdateDataWithDefaults() *MemberUpdateData {
	this := MemberUpdateData{}
	return &this
}

// GetType returns the Type field value
func (o *MemberUpdateData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MemberUpdateData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MemberUpdateData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *MemberUpdateData) GetAttributes() MemberUpdateDataAttributes {
	if o == nil {
		var ret MemberUpdateDataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *MemberUpdateData) GetAttributesOk() (*MemberUpdateDataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *MemberUpdateData) SetAttributes(v MemberUpdateDataAttributes) {
	o.Attributes = v
}

func (o MemberUpdateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberUpdateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *MemberUpdateData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberUpdateData := _MemberUpdateData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberUpdateData)

	if err != nil {
		return err
	}

	*o = MemberUpdateData(varMemberUpdateData)

	return err
}

type NullableMemberUpdateData struct {
	value *MemberUpdateData
	isSet bool
}

func (v NullableMemberUpdateData) Get() *MemberUpdateData {
	return v.value
}

func (v *NullableMemberUpdateData) Set(val *MemberUpdateData) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberUpdateData) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberUpdateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberUpdateData(val *MemberUpdateData) *NullableMemberUpdateData {
	return &NullableMemberUpdateData{value: val, isSet: true}
}

func (v NullableMemberUpdateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberUpdateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


