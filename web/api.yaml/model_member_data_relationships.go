/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the MemberDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberDataRelationships{}

// MemberDataRelationships struct for MemberDataRelationships
type MemberDataRelationships struct {
	Teams *MemberDataRelationshipsTeams `json:"teams,omitempty"`
	User *MemberDataRelationshipsUser `json:"user,omitempty"`
}

// NewMemberDataRelationships instantiates a new MemberDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDataRelationships() *MemberDataRelationships {
	this := MemberDataRelationships{}
	return &this
}

// NewMemberDataRelationshipsWithDefaults instantiates a new MemberDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDataRelationshipsWithDefaults() *MemberDataRelationships {
	this := MemberDataRelationships{}
	return &this
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *MemberDataRelationships) GetTeams() MemberDataRelationshipsTeams {
	if o == nil || IsNil(o.Teams) {
		var ret MemberDataRelationshipsTeams
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDataRelationships) GetTeamsOk() (*MemberDataRelationshipsTeams, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *MemberDataRelationships) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given MemberDataRelationshipsTeams and assigns it to the Teams field.
func (o *MemberDataRelationships) SetTeams(v MemberDataRelationshipsTeams) {
	o.Teams = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *MemberDataRelationships) GetUser() MemberDataRelationshipsUser {
	if o == nil || IsNil(o.User) {
		var ret MemberDataRelationshipsUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDataRelationships) GetUserOk() (*MemberDataRelationshipsUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *MemberDataRelationships) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given MemberDataRelationshipsUser and assigns it to the User field.
func (o *MemberDataRelationships) SetUser(v MemberDataRelationshipsUser) {
	o.User = &v
}

func (o MemberDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableMemberDataRelationships struct {
	value *MemberDataRelationships
	isSet bool
}

func (v NullableMemberDataRelationships) Get() *MemberDataRelationships {
	return v.value
}

func (v *NullableMemberDataRelationships) Set(val *MemberDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDataRelationships(val *MemberDataRelationships) *NullableMemberDataRelationships {
	return &NullableMemberDataRelationships{value: val, isSet: true}
}

func (v NullableMemberDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


